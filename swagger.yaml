openapi: 3.0.3
info:
  title: Pet Sitter App API Documentation - OpenAPI 3.0
  description: |-
    Contains all API endpoints propositions
    Database : mongoDB
    Some useful links:
    - [The Pet Sitter API repository](https://github.com/segoleneganzin/pet-sitter-api)

  termsOfService: http://swagger.io/terms/
  contact:
    email: segolene.ganzin@gmail.com
  version: 1.0.0

servers:
  - url: http://localhost:3000/api/v1

tags:
  - name: user
    description: Everything about users
  - name: sitter
    description: Everything about sitters
  - name: owner
    description: Everything about owners

paths:
  /user:
    post:
      tags:
        - user
      summary: Add a new user
      description: Add a new user (create automatically sitter or owner, depending on role)
      operationId: createUser
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Password is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists         
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Profile creation failed / Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - user
      security:
        - Bearer: []
      summary: Get one user, by id on token
      description: Get one user, by id on token
      operationId: getUser
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid status value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'         
    patch:
      tags:
        - user
      security:
        - Bearer: []
      summary: Update user
      description: This can only be done by the logged-in user.
      operationId: updateUser
      requestBody:
        description: Update an existing user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Authorization header is missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - user
      security:
        - Bearer: []
      summary: Delete user
      description: This can only be done by the logged-in user. It deletes the profile at the same time (owner or sitter) and profilePicture in db.
      operationId: deleteUser
      responses:
        '404':
          description: User not found! / Sitter not found! / Owner not found!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Login a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        '404':
          description: User not found!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
  /sitters:
    get:
      tags:
        - sitter
      summary: Get all sitters
      description: Returns a list of sitters
      operationId: getAllSitters
      responses:
        '200':
          description: Sitters retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SittersResponse'
        '500':
          description: Failed to retrieve Sitters. Please try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /sitters/{id}:
    parameters:
      - name: id
        in: path
        description: ID of sitter that needs to be fetched
        required: true
        schema:
          type: string
    get:
      tags:
        - sitter
      summary: Get one sitter by ID
      description: ''
      operationId: getSitterById
      responses:
        '200':
          description: Sitter retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SitterResponse'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Sitter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - sitter
      security:
        - Bearer: []
      summary: Update sitter
      description: This can only be done by the logged-in sitter.
      operationId: updateSitter
      requestBody:
        description: Update an existing sitter
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SitterUpdate'
      responses:
        '200':
          description: Sitter updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SitterResponse'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Sitter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
  /owners:
    get:
      tags:
        - owner
      summary: Get all owners
      description: Returns a list of owners
      operationId: getAllOwners
      responses:
        '200':
          description: Owner retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnersResponse'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Owners not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error    
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /owners/{id}:
    parameters:
      - name: id
        in: path
        description: ID of owner that needs to be fetched
        required: true
        schema:
          type: string
    get:
      tags:
        - owner
      summary: Get one owner by ID
      description: ''
      operationId: getOwnerById
      responses:
        '200':
          description: Owner retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerResponse'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Owner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - owner
      security:
        - Bearer: []
      summary: Update owner
      description: This can only be done by the logged-in owner.
      operationId: updateOwner
      requestBody:
        description: Update an existing owner
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OwnerUpdate'
      responses:
        '200':
          description: Owner updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerResponse'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Owner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          
components:
  schemas:
    UserCreate:
      type: object
      required:
        - email
        - password
        - role
        - firstName
        - lastName
        - city
        - country
      properties:
        email:
          type: string
          description: The user's email address
          example: "user@example.com"
        password:
          type: string
          description: The user's password (hashed)
          example: "test123"
        role:
          type: string
          enum:
            - sitter
            - owner
          description: Role of the user
        profilePicture:
          type: string
          format: uri
          description: URL of the owner's profile picture
        firstName:
          type: string
          description: The owner/sitter's first name
          example: "John"
        lastName:
          type: string
          description: The owner/sitter's last name
          example: "Doe"
        city:
          type: string
          description: The owner/sitter's city of residence
          example: "New York"
        country:
          type: string
          description: The owner/sitter's country of residence
          example: "USA"
        tel:
          type: string
          description: The sitter's tel
          example: "0754845555"
        presentation:
          type: string
          description: A short bio or presentation for the sitter
          example: "I have been a pet sitter for 5 years and love animals."
        acceptedPets:
          type: array
          items:
            type: string
            enum:
              - cat
              - dog
              - nac
          description: List of pets the sitter accepts
          example: ["cat", "dog", "nac"]
        pets:
          type: array
          items:
            type: string
          description: List of pets the owner has
          example: ["dog", "cat"]
        
    UserUpdate:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          
    UserLogin:
      properties:
        email:
          type: string
          description: user email
          example: "user@example.com"
        password:
          type: string
          description: user password   
          example: "test123"
    UserResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        body:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
            role:
              type: string
            profileId:
              type: string
    UserLoginResponse:
        type: object
        properties:
          token:
            type: string

    Sitter:
      type: object
      required:
        - firstName
        - lastName
        - tel
        - city
        - country
        - presentation
        - acceptedPets
      properties:
        id:
          type: string
          description: The unique identifier for the sitter (MongoDB ObjectId)
          example: "60d21b4667d0d8992e610c85"
        profilePicture:
          type: string
          description: URL of the sitter's profile picture
          example: "https://example.com/pic.jpg"
        firstName:
          type: string
          description: The sitter's first name
          example: "John"
        lastName:
          type: string
          description: The sitter's last name
          example: "Doe"
        tel:
          type: string
          description: The sitter's phone number
          example: "+1-555-5555"
        city:
          type: string
          description: The sitter's city of residence
          example: "New York"
        country:
          type: string
          description: The sitter's country of residence
          example: "USA"
        presentation:
          type: string
          description: A short bio or presentation for the sitter
          example: "I have been a pet sitter for 5 years and love animals."
        acceptedPets:
          type: array
          items:
            type: string
            enum: 
              - cat
              - dog
              - nac
          description: List of pets the sitter accepts
          example: ["cat", "dog", "nac"]

    SitterUpdate:
      type: object
      properties:
        profilePicture:
          type: string
          format: uri
          description: URL of the sitter's profile picture
          example: "https://example.com/new-pic.jpg"
        firstName:
          type: string
          description: The sitter's first name
          example: "Jane"
        lastName:
          type: string
          description: The sitter's last name
          example: "Smith"
        tel:
          type: string
          description: The sitter's phone number
          example: "+1-555-1234"
        city:
          type: string
          description: The sitter's city of residence
          example: "Los Angeles"
        country:
          type: string
          description: The sitter's country of residence
          example: "Canada"
        presentation:
          type: string
          description: A new bio or presentation for the sitter
          example: "I have been a professional sitter for 7 years."
        acceptedPets:
          type: array
          items:
            type: string
            enum:
              - cat
              - dog
              - nac
          description: List of pets the sitter now accepts
          example: ["cat"]
          
    SittersResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        body:
          type: array
          items:
            $ref: '#/components/schemas/Sitter'
            
    SitterResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        body:
          type: object
          properties:
            id:
              type: string
              description: Id of account
            profilePicture:
              type: string
              description: URL of the sitter's profile picture
              example: "https://example.com/new-pic.jpg"
            firstName:
              type: string
              description: The sitter's first name
              example: "Jane"
            lastName:
              type: string
              description: The sitter's last name
              example: "Smith"
            tel:
              type: string
              description: The sitter's phone number
              example: "+1-555-1234"
            city:
              type: string
              description: The sitter's city of residence
              example: "Los Angeles"
            country:
              type: string
              description: The sitter's country of residence
              example: "Canada"
            presentation:
              type: string
              description: A new bio or presentation for the sitter
              example: "I have been a professional sitter for 7 years."
            acceptedPets:
              type: array
              items:
                type: string
                enum:
                  - cat
                  - dog
                  - nac
              description: List of pets the sitter now accepts
              example: ["cat"]

    Owner:
      type: object
      required:
        - firstName
        - lastName
        - city
        - country
        - pets
      properties:
        id:
          type: string
          description: The unique identifier for the owner (MongoDB ObjectId)
          example: "60d21b4667d0d8992e610c85"
        profilePicture:
          type: string
          description: URL of the owner's profile picture
          example: "https://example.com/pic.jpg"
        firstName:
          type: string
          description: The owner's first name
          example: "John"
        lastName:
          type: string
          description: The owner's last name
          example: "Doe"
        city:
          type: string
          description: The owner's city of residence
          example: "New York"
        country:
          type: string
          description: The owner's country of residence
          example: "USA"
        pets:
          type: array
          items:
            type: string
          description: List of pets the owner has
          example: ["dog", "cat"]

    OwnerUpdate:
      type: object
      properties:
        profilePicture:
          type: string
          format: uri
          description: URL of the owner's new profile picture
          example: "https://example.com/new-pic.jpg"
        firstName:
          type: string
          description: The owner's new first name
          example: "Jane"
        lastName:
          type: string
          description: The owner's new last name
          example: "Smith"
        city:
          type: string
          description: The owner's new city of residence
          example: "Los Angeles"
        country:
          type: string
          description: The owner's new country of residence
          example: "Canada"
        pets:
          type: array
          items:
            type: string
          description: List of pets the owner now has
          example: ["dog"]
          
    OwnersResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        body:
          type: array
          items:
            $ref: '#/components/schemas/Owner'
            
    OwnerResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        body:
          type: object
          properties:
            id:
              type: string
              description: Id of account
            profilePicture:
              type: string
              description: URL of the owner's new profile picture
              example: "https://example.com/new-pic.jpg"
            firstName:
              type: string
              description: The owner's new first name
              example: "Jane"
            lastName:
              type: string
              description: The owner's new last name
              example: "Smith"
            city:
              type: string
              description: The owner's new city of residence
              example: "Los Angeles"
            country:
              type: string
              description: The owner's new country of residence
              example: "Canada"
            pets:
              type: array
              items:
                type: string
              description: List of pets the owner now has
              example: ["dog"]
              
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: "Resource not found"

  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
