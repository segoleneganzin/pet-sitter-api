openapi: 3.0.3
info:
  title: Pet Sitter App API Documentation - OpenAPI 3.0
  description: |-
    Contains all API endpoints propositions

    Database : mongoDB

    Some useful links:
    - [The Pet Sitter API repository](https://github.com/segoleneganzin/pet-sitter-api)

  contact:
    email: segolene.ganzin@gmail.com
  version: 1.0.0

servers:
  - url: http://localhost:3000/api/v1

tags:
  - name: users
    description: Everything about users
  - name: sitters
    description: Everything about sitters
  - name: owners
    description: Everything about owners

paths:
  /auth:
    post:
      tags:
        - auth
      summary: Logs user into the system
      description: ''
      operationId: login
      requestBody:
        description: Login a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLogin'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid email/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - auth
      security:
        - Bearer: []
      summary: Update log (email or pssword), by id on token
      description: This can only be done by the logged-in user.
      requestBody:
        description: Update an existing user log
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLogin'
      responses:
        '200':
          description: Log updated successully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Authorization header is missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Failed to update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    post:
      tags:
        - users
      summary: Create a new user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Password is required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Profile creation failed / Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - users
      security:
        - Bearer: []
      summary: Update user, by id on token
      description: This can only be done by the logged-in user.
      requestBody:
        description: Update an existing user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Authorization header is missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - users
      security:
        - Bearer: []
      summary: Delete user
      description: This can only be done by the logged-in user. It deletes the profilePicture in db.
      operationId: deleteUser
      responses:
        '400':
          description: Invalid email/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found / Sitter not found / Owner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags:
        - users
      summary: Get one user, by id
      description: Get one user, by id
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sitters:
    get:
      tags:
        - sitters
      summary: Get all sitters
      description: Returns a list of sitters
      operationId: getAllSitters
      responses:
        '200':
          description: Sitters retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '500':
          description: Failed to retrieve Sitters. Please try again later.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /sitters/{id}:
    get:
      tags:
        - sitters
      summary: Get one sitter by ID
      description: ''
      operationId: getSitterById
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sitter retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Sitter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /owners:
    get:
      tags:
        - owners
      summary: Get all owners
      description: Returns a list of owners
      operationId: getAllOwners
      responses:
        '200':
          description: Owner retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Owners not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /owners/{id}:
    get:
      tags:
        - owners
      summary: Get one owner by ID
      description: ''
      operationId: getOwnerById
      parameters:
        - name: id
          in: path
          description: ID of sitter that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Owner retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Owner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    AuthLogin:
      properties:
        email:
          type: string
          description: user email
          example: 'user@example.com'
        password:
          type: string
          description: user password
          example: 'test123'
    AuthLoginResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        body:
          type: object
          properties:
            token:
              type: string

    UserDocument:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the user (MongoDB ObjectId)
          example: '60d21b4667d0d8992e610c85'
        email:
          type: string
          description: The user's email address
          example: 'user@example.com'
        roles:
          type: array
          items:
            type: string
            enum:
              - sitter
              - owner
          description: Role(s) of the user
        profilePicture:
          type: string
          format: uri
          description: URL of the owner's profile picture
        firstName:
          type: string
          description: The owner/sitter's first name
          example: 'John'
        lastName:
          type: string
          description: The owner/sitter's last name
          example: 'Doe'
        city:
          type: string
          description: The owner/sitter's city of residence
          example: 'New York'
        country:
          type: string
          description: The owner/sitter's country of residence
          example: 'USA'
        tel:
          type: string
          description: The sitter's tel
          example: '0754845555'
        presentation:
          type: string
          description: A short bio or presentation for the sitter
          example: 'I have been a pet sitter for 5 years and love animals.'
        acceptedPets:
          type: array
          items:
            type: string
            enum:
              - cat
              - dog
              - nac
          description: List of pets the sitter accepts
          example: ['cat', 'dog', 'nac']
        pets:
          type: array
          items:
            type: string
            enum:
              - cat
              - dog
              - nac
          description: List of pets the owner has

    User:
      type: object
      required:
        - email
        - password
        - roles
        - firstName
        - lastName
        - city
        - country
      properties:
        email:
          type: string
          description: The user's email address
          example: 'user@example.com'
        password:
          type: string
          description: The user's password (hashed)
          example: 'test123'
        roles:
          type: array
          items:
            type: string
            enum:
              - sitter
              - owner
          description: Role(s) of the user
        profilePicture:
          type: string
          format: uri
          description: URL of the owner's profile picture
        firstName:
          type: string
          description: The owner/sitter's first name
          example: 'John'
        lastName:
          type: string
          description: The owner/sitter's last name
          example: 'Doe'
        city:
          type: string
          description: The owner/sitter's city of residence
          example: 'New York'
        country:
          type: string
          description: The owner/sitter's country of residence
          example: 'USA'
        tel:
          type: string
          description: The sitter's tel
          example: '0754845555'
        presentation:
          type: string
          description: A short bio or presentation for the sitter
          example: 'I have been a pet sitter for 5 years and love animals.'
        acceptedPets:
          type: array
          items:
            type: string
            enum:
              - cat
              - dog
              - nac
          description: List of pets the sitter accepts
          example: ['cat', 'dog', 'nac']
        pets:
          type: array
          items:
            type: string
            enum:
              - cat
              - dog
              - nac
          description: List of pets the owner has

    UserUpdate:
      type: object
      properties:
        roles:
          type: array
          items:
            type: string
            enum:
              - sitter
              - owner
          description: Role(s) of the user
        profilePicture:
          type: string
          format: uri
          description: URL of the owner's profile picture
        firstName:
          type: string
          description: The owner/sitter's first name
          example: 'John'
        lastName:
          type: string
          description: The owner/sitter's last name
          example: 'Doe'
        city:
          type: string
          description: The owner/sitter's city of residence
          example: 'New York'
        country:
          type: string
          description: The owner/sitter's country of residence
          example: 'USA'
        tel:
          type: string
          description: The sitter's tel
          example: '0754845555'
        presentation:
          type: string
          description: A short bio or presentation for the sitter
          example: 'I have been a pet sitter for 5 years and love animals.'
        acceptedPets:
          type: array
          items:
            type: string
            enum:
              - cat
              - dog
              - nac
          description: List of pets the sitter accepts
          example: ['cat', 'dog', 'nac']
        pets:
          type: array
          items:
            type: string
            enum:
              - cat
              - dog
              - nac
          description: List of pets the owner has

    UserResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        body:
          type: object
          $ref: '#/components/schemas/UserDocument'

    UsersResponse:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
        body:
          type: array
          items:
            $ref: '#/components/schemas/UserDocument'

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: 'Resource not found'

  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
